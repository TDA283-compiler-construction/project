FROM ubuntu:bionic

RUN apt-get update && apt-get install -y \
    build-essential \
    default-jdk \
    nasm \
    llvm \
    clang \
    emacs \
    vim \
    tmux \
    curl \
    git \
    python3 \
    ghc \
    flex \
    bison \
    unzip \
    bubblewrap

RUN curl -sSL https://get.haskellstack.org/ | sh

RUN curl -sL \
      https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh > \
      install.sh && \
      yes '' | sh install.sh && \
      rm install.sh

RUN useradd -ms /bin/bash user
USER user
WORKDIR /home/user

RUN curl https://sh.rustup.rs -sSf > rustup.sh && \
    sh rustup.sh -y && \
    $HOME/.cargo/bin/rustup toolchain install nightly && \
    rm rustup.sh


RUN mkdir -p classpath/JLex/JLex
RUN cd classpath/JLex/JLex && \
    curl -O https://www.cs.princeton.edu/~appel/modern/java/JLex/current/Main.java && \
    javac Main.java

RUN mkdir -p classpath/CUP
RUN cd classpath/CUP && \
    curl -O http://www2.cs.tum.edu/projects/cup/releases/java-cup-bin-11b-20160615.tar.gz && \
    tar -xvf java-cup-bin-11b-20160615.tar.gz

RUN mkdir -p subm

ENV PATH="/home/user/.local/bin:${PATH}"
ENV PATH="/home/user/.cargo/bin:${PATH}"
ENV CLASSPATH="/home/user/classpath/JLex:${CLASSPATH}"
ENV CLASSPATH="/home/user/classpath/CUP/java-cup-11b-runtime.jar:${CLASSPATH}"
ENV CLASSPATH="/home/user/classpath/CUP/java-cup-11b.jar:${CLASSPATH}"

RUN stack install \
    array \
    base \
    containers \
    filepath \
    microlens-platform \
    mtl \
    process
RUN stack install BNFC

RUN opam init -a -y --disable-sandboxing --dot-profile=~/.bashrc
RUN sh /home/user/.opam/opam-init/init.sh
RUN opam install dune
RUN opam install -y core alcotest

ENV PATH="/home/user/.opam/default/bin:${PATH}"

# Nix needs an user-writable /nix
USER root
RUN mkdir /nix
RUN chown user /nix
# Install nix
USER user
RUN curl -L https://nixos.org/nix/install | sh
# Manually set up nix variables, since the .profile doesn't get sourced here
ENV PATH="/home/user/.nix-profile/bin:${PATH}"
ENV NIX_PATH="${NIX_PATH:+$NIX_PATH:}/home/user/.nix-defexpr/channels"
ENV NIX_SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt
ENV NIX_PROFILES="/nix/var/nix/profiles/default /home/user/.nix-profile"
# Make an helper file that defines riscv cross compilation
RUN echo 'let hostPkgs = import <nixpkgs> {}; \
    in import <nixpkgs> \
    { crossSystem = hostPkgs.lib.systems.examples.riscv64-embedded; }' \
    > riscv.nix
# Install x86 spike, cross gcc, and riscv pk
RUN nix-env -i -A nixpkgs.spike
RUN nix-env -i -f riscv.nix -A pkgsBuildHost.gcc
RUN nix-env -i -f riscv.nix -A pkgsHostTarget.riscv-pk

RUN git clone https://github.com/myreen/tda283
WORKDIR /home/user/tda283/tester

CMD /bin/bash
